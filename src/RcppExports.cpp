// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArrayFire.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// smr_demo_run
int smr_demo_run(int perc, std::string lib_path, std::string device, bool verbose, bool benchmark);
RcppExport SEXP _viewmastR2_smr_demo_run(SEXP percSEXP, SEXP lib_pathSEXP, SEXP deviceSEXP, SEXP verboseSEXP, SEXP benchmarkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type perc(percSEXP);
    Rcpp::traits::input_parameter< std::string >::type lib_path(lib_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    rcpp_result_gen = Rcpp::wrap(smr_demo_run(perc, lib_path, device, verbose, benchmark));
    return rcpp_result_gen;
END_RCPP
}
// smr
af::array smr(RcppArrayFire::typed_array<f32> train_feats, RcppArrayFire::typed_array<f32> test_feats, RcppArrayFire::typed_array<s32> train_targets, RcppArrayFire::typed_array<s32> test_targets, int num_classes, RcppArrayFire::typed_array<f32> query, float lambda, float learning_rate, int iterations, int batch_size, float max_error, bool verbose, bool benchmark, int device);
RcppExport SEXP _viewmastR2_smr(SEXP train_featsSEXP, SEXP test_featsSEXP, SEXP train_targetsSEXP, SEXP test_targetsSEXP, SEXP num_classesSEXP, SEXP querySEXP, SEXP lambdaSEXP, SEXP learning_rateSEXP, SEXP iterationsSEXP, SEXP batch_sizeSEXP, SEXP max_errorSEXP, SEXP verboseSEXP, SEXP benchmarkSEXP, SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type train_feats(train_featsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type test_feats(test_featsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<s32> >::type train_targets(train_targetsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<s32> >::type test_targets(test_targetsSEXP);
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type query(querySEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< float >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type benchmark(benchmarkSEXP);
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    rcpp_result_gen = Rcpp::wrap(smr(train_feats, test_feats, train_targets, test_targets, num_classes, query, lambda, learning_rate, iterations, batch_size, max_error, verbose, benchmark, device));
    return rcpp_result_gen;
END_RCPP
}
// computeSparseRowVariances
Rcpp::NumericVector computeSparseRowVariances(IntegerVector j, NumericVector val, NumericVector rm, int n);
RcppExport SEXP _viewmastR2_computeSparseRowVariances(SEXP jSEXP, SEXP valSEXP, SEXP rmSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rm(rmSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSparseRowVariances(j, val, rm, n));
    return rcpp_result_gen;
END_RCPP
}
// get_sigmoid
af::array get_sigmoid(RcppArrayFire::typed_array<f32> input);
RcppExport SEXP _viewmastR2_get_sigmoid(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sigmoid(input));
    return rcpp_result_gen;
END_RCPP
}
// get_relu
af::array get_relu(RcppArrayFire::typed_array<f32> input);
RcppExport SEXP _viewmastR2_get_relu(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(get_relu(input));
    return rcpp_result_gen;
END_RCPP
}
// get_mnist
Rcpp::List get_mnist(std::string lib_path, int perc, bool verbose);
RcppExport SEXP _viewmastR2_get_mnist(SEXP lib_pathSEXP, SEXP percSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type lib_path(lib_pathSEXP);
    Rcpp::traits::input_parameter< int >::type perc(percSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mnist(lib_path, perc, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_backends
int test_backends();
RcppExport SEXP _viewmastR2_test_backends() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_backends());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_viewmastR2_smr_demo_run", (DL_FUNC) &_viewmastR2_smr_demo_run, 5},
    {"_viewmastR2_smr", (DL_FUNC) &_viewmastR2_smr, 14},
    {"_viewmastR2_computeSparseRowVariances", (DL_FUNC) &_viewmastR2_computeSparseRowVariances, 4},
    {"_viewmastR2_get_sigmoid", (DL_FUNC) &_viewmastR2_get_sigmoid, 1},
    {"_viewmastR2_get_relu", (DL_FUNC) &_viewmastR2_get_relu, 1},
    {"_viewmastR2_get_mnist", (DL_FUNC) &_viewmastR2_get_mnist, 3},
    {"_viewmastR2_test_backends", (DL_FUNC) &_viewmastR2_test_backends, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_viewmastR2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
